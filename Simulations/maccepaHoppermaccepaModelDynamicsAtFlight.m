function dQ = maccepaHoppermaccepaModelDynamicsAtFlight(Q, param, torque)
    % Assign global variables to local
    m1 = param.m1; m2 = param.m2; l1 = param.l1; l2 = param.l2;
    J1 = param.J1; J2 = param.J2; lc1 = param.lc1; lc2 = param.lc2;
    g = param.g; 
    theta1 = Q(1); theta2 = Q(2); xf = Q(3); yf = Q(4);
    dtheta1 = Q(5); dtheta2 = Q(6); dxf = Q(7); dyf = Q(8);
    tau1 = torque(1); tau2 = torque(2);
    
    dQ = zeros(8, 1);
    dQ(1) = Q(5);
    dQ(2) = Q(6);
    dQ(3) = Q(7);
    dQ(4) = Q(8);
    dQ(5) = (2*(- sin(theta2)*dtheta1^2*l2^3*lc1*m1^2*m2^2 - (sin(2*theta2)*dtheta1^2*l2^2*lc1^2*m1^2*m2^2)/2 + 3*sin(theta2)*dtheta1^2*l2^2*lc1*lc2*m1^2*m2^2 + sin(2*theta2)*dtheta1^2*l2*lc1^2*lc2*m1^2*m2^2 - 3*sin(theta2)*dtheta1^2*l2*lc1*lc2^2*m1^2*m2^2 - J2*sin(theta2)*dtheta1^2*l2*lc1*m1^2*m2 - J2*sin(theta2)*dtheta1^2*l2*lc1*m1*m2^2 - (sin(2*theta2)*dtheta1^2*lc1^2*lc2^2*m1^2*m2^2)/2 + sin(theta2)*dtheta1^2*lc1*lc2^3*m1^2*m2^2 + J2*sin(theta2)*dtheta1^2*lc1*lc2*m1^2*m2 + J2*sin(theta2)*dtheta1^2*lc1*lc2*m1*m2^2 + 2*sin(theta2)*dtheta1*dtheta2*l2^3*lc1*m1^2*m2^2 - 6*sin(theta2)*dtheta1*dtheta2*l2^2*lc1*lc2*m1^2*m2^2 + 6*sin(theta2)*dtheta1*dtheta2*l2*lc1*lc2^2*m1^2*m2^2 + 2*J2*sin(theta2)*dtheta1*dtheta2*l2*lc1*m1^2*m2 + 2*J2*sin(theta2)*dtheta1*dtheta2*l2*lc1*m1*m2^2 - 2*sin(theta2)*dtheta1*dtheta2*lc1*lc2^3*m1^2*m2^2 - 2*J2*sin(theta2)*dtheta1*dtheta2*lc1*lc2*m1^2*m2 - 2*J2*sin(theta2)*dtheta1*dtheta2*lc1*lc2*m1*m2^2 - sin(theta2)*dtheta2^2*l2^3*lc1*m1^2*m2^2 + 3*sin(theta2)*dtheta2^2*l2^2*lc1*lc2*m1^2*m2^2 - 3*sin(theta2)*dtheta2^2*l2*lc1*lc2^2*m1^2*m2^2 - J2*sin(theta2)*dtheta2^2*l2*lc1*m1^2*m2 - J2*sin(theta2)*dtheta2^2*l2*lc1*m1*m2^2 + sin(theta2)*dtheta2^2*lc1*lc2^3*m1^2*m2^2 + J2*sin(theta2)*dtheta2^2*lc1*lc2*m1^2*m2 + J2*sin(theta2)*dtheta2^2*lc1*lc2*m1*m2^2 + tau2*l2^2*m1^2*m2 + tau2*l2^2*m1*m2^2 + tau2*cos(theta2)*l2*lc1*m1^2*m2 + tau2*cos(theta2)*l2*lc1*m1*m2^2 - 2*tau2*l2*lc2*m1^2*m2 - 2*tau2*l2*lc2*m1*m2^2 - tau2*cos(theta2)*lc1*lc2*m1^2*m2 - tau2*cos(theta2)*lc1*lc2*m1*m2^2 + tau2*lc2^2*m1^2*m2 + tau2*lc2^2*m1*m2^2 + J2*tau2*m1^2 + 2*J2*tau2*m1*m2 + J2*tau2*m2^2))/(2*J1*J2*m1^2 + 2*J1*J2*m2^2 + l2^2*lc1^2*m1^2*m2^2 + lc1^2*lc2^2*m1^2*m2^2 + 2*J1*l2^2*m1*m2^2 + 2*J1*l2^2*m1^2*m2 + 2*J1*lc2^2*m1*m2^2 + 2*J1*lc2^2*m1^2*m2 + 2*J2*lc1^2*m1*m2^2 + 2*J2*lc1^2*m1^2*m2 + 4*J1*J2*m1*m2 - 2*l2*lc1^2*lc2*m1^2*m2^2 - 4*J1*l2*lc2*m1*m2^2 - 4*J1*l2*lc2*m1^2*m2 - l2^2*lc1^2*m1^2*m2^2*cos(2*theta2) - lc1^2*lc2^2*m1^2*m2^2*cos(2*theta2) + 2*l2*lc1^2*lc2*m1^2*m2^2*cos(2*theta2));
    dQ(6) = (2*(J1*m1^2*tau2 + J1*m2^2*tau2 + J2*m1^2*tau2 + J2*m2^2*tau2 + l2^2*m1*m2^2*tau2 + l2^2*m1^2*m2*tau2 + lc1^2*m1*m2^2*tau2 + lc1^2*m1^2*m2*tau2 + lc2^2*m1*m2^2*tau2 + lc2^2*m1^2*m2*tau2 + 2*J1*m1*m2*tau2 + 2*J2*m1*m2*tau2 - 2*l2*lc2*m1*m2^2*tau2 - 2*l2*lc2*m1^2*m2*tau2 - dtheta1^2*l2^2*lc1^2*m1^2*m2^2*sin(2*theta2) - (dtheta2^2*l2^2*lc1^2*m1^2*m2^2*sin(2*theta2))/2 - dtheta1^2*lc1^2*lc2^2*m1^2*m2^2*sin(2*theta2) - (dtheta2^2*lc1^2*lc2^2*m1^2*m2^2*sin(2*theta2))/2 + 2*l2*lc1*m1*m2^2*tau2*cos(theta2) + 2*l2*lc1*m1^2*m2*tau2*cos(theta2) - 2*lc1*lc2*m1*m2^2*tau2*cos(theta2) - 2*lc1*lc2*m1^2*m2*tau2*cos(theta2) - dtheta1^2*l2*lc1^3*m1^2*m2^2*sin(theta2) - dtheta1^2*l2^3*lc1*m1^2*m2^2*sin(theta2) - dtheta2^2*l2^3*lc1*m1^2*m2^2*sin(theta2) + dtheta1^2*lc1*lc2^3*m1^2*m2^2*sin(theta2) + dtheta1^2*lc1^3*lc2*m1^2*m2^2*sin(theta2) + dtheta2^2*lc1*lc2^3*m1^2*m2^2*sin(theta2) - 3*dtheta1^2*l2*lc1*lc2^2*m1^2*m2^2*sin(theta2) + 3*dtheta1^2*l2^2*lc1*lc2*m1^2*m2^2*sin(theta2) - 3*dtheta2^2*l2*lc1*lc2^2*m1^2*m2^2*sin(theta2) + 3*dtheta2^2*l2^2*lc1*lc2*m1^2*m2^2*sin(theta2) - J1*dtheta1^2*l2*lc1*m1*m2^2*sin(theta2) - J1*dtheta1^2*l2*lc1*m1^2*m2*sin(theta2) - J2*dtheta1^2*l2*lc1*m1*m2^2*sin(theta2) - J2*dtheta1^2*l2*lc1*m1^2*m2*sin(theta2) - J2*dtheta2^2*l2*lc1*m1*m2^2*sin(theta2) - J2*dtheta2^2*l2*lc1*m1^2*m2*sin(theta2) + J1*dtheta1^2*lc1*lc2*m1*m2^2*sin(theta2) + J1*dtheta1^2*lc1*lc2*m1^2*m2*sin(theta2) + J2*dtheta1^2*lc1*lc2*m1*m2^2*sin(theta2) + J2*dtheta1^2*lc1*lc2*m1^2*m2*sin(theta2) + J2*dtheta2^2*lc1*lc2*m1*m2^2*sin(theta2) + J2*dtheta2^2*lc1*lc2*m1^2*m2*sin(theta2) + dtheta1*dtheta2*l2^2*lc1^2*m1^2*m2^2*sin(2*theta2) + dtheta1*dtheta2*lc1^2*lc2^2*m1^2*m2^2*sin(2*theta2) + 2*dtheta1^2*l2*lc1^2*lc2*m1^2*m2^2*sin(2*theta2) + dtheta2^2*l2*lc1^2*lc2*m1^2*m2^2*sin(2*theta2) + 2*dtheta1*dtheta2*l2^3*lc1*m1^2*m2^2*sin(theta2) - 2*dtheta1*dtheta2*lc1*lc2^3*m1^2*m2^2*sin(theta2) + 6*dtheta1*dtheta2*l2*lc1*lc2^2*m1^2*m2^2*sin(theta2) - 6*dtheta1*dtheta2*l2^2*lc1*lc2*m1^2*m2^2*sin(theta2) + 2*J2*dtheta1*dtheta2*l2*lc1*m1*m2^2*sin(theta2) + 2*J2*dtheta1*dtheta2*l2*lc1*m1^2*m2*sin(theta2) - 2*J2*dtheta1*dtheta2*lc1*lc2*m1*m2^2*sin(theta2) - 2*J2*dtheta1*dtheta2*lc1*lc2*m1^2*m2*sin(theta2) - 2*dtheta1*dtheta2*l2*lc1^2*lc2*m1^2*m2^2*sin(2*theta2)))/(2*J1*J2*m1^2 + 2*J1*J2*m2^2 + l2^2*lc1^2*m1^2*m2^2 + lc1^2*lc2^2*m1^2*m2^2 + 2*J1*l2^2*m1*m2^2 + 2*J1*l2^2*m1^2*m2 + 2*J1*lc2^2*m1*m2^2 + 2*J1*lc2^2*m1^2*m2 + 2*J2*lc1^2*m1*m2^2 + 2*J2*lc1^2*m1^2*m2 + 4*J1*J2*m1*m2 - 2*l2*lc1^2*lc2*m1^2*m2^2 - 4*J1*l2*lc2*m1*m2^2 - 4*J1*l2*lc2*m1^2*m2 - l2^2*lc1^2*m1^2*m2^2*cos(2*theta2) - lc1^2*lc2^2*m1^2*m2^2*cos(2*theta2) + 2*l2*lc1^2*lc2*m1^2*m2^2*cos(2*theta2));
    dQ(7) = -(2*J1*l2*m1^2*tau2*cos(theta1 - theta2) - 2*J2*lc1*m1^2*tau2*cos(theta1) + 2*J1*lc2*m2^2*tau2*cos(theta1 - theta2) + 2*J1*J2*dtheta1^2*l2*m1^2*sin(theta1 - theta2) + 2*J1*J2*dtheta2^2*l2*m1^2*sin(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc2*m2^2*sin(theta1 - theta2) + 2*J1*J2*dtheta2^2*lc2*m2^2*sin(theta1 - theta2) - dtheta1^2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 + theta2) - dtheta2^2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 + theta2) - l2^2*lc1*m1^2*m2*tau2*cos(theta1) - lc1*lc2^2*m1*m2^2*tau2*cos(theta1) - 2*lc1*lc2^2*m1^2*m2*tau2*cos(theta1) + dtheta1^2*lc1^3*lc2^2*m1^2*m2^2*sin(theta1) - 2*J2*lc1*m1*m2*tau2*cos(theta1) + l2*lc1^2*m1^2*m2*tau2*cos(theta1 - theta2) + l2^2*lc1*m1^2*m2*tau2*cos(theta1 - 2*theta2) + 2*lc1^2*lc2*m1*m2^2*tau2*cos(theta1 - theta2) + lc1^2*lc2*m1^2*m2*tau2*cos(theta1 - theta2) - lc1*lc2^2*m1*m2^2*tau2*cos(theta1 - 2*theta2) + 2*J2*dtheta1^2*lc1^3*m1^2*m2*sin(theta1) + 2*J1*l2*m1*m2*tau2*cos(theta1 - theta2) + dtheta1^2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 - theta2) - dtheta1^2*lc1^3*lc2^2*m1^2*m2^2*sin(theta1 - 2*theta2) + dtheta2^2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 - theta2) + 2*J1*lc2*m1*m2*tau2*cos(theta1 - theta2) + 2*J1*dtheta1^2*l2^3*m1^2*m2*sin(theta1 - theta2) + 2*J1*dtheta2^2*l2^3*m1^2*m2*sin(theta1 - theta2) + 2*J1*dtheta1^2*lc2^3*m1*m2^2*sin(theta1 - theta2) + 2*J1*dtheta2^2*lc2^3*m1*m2^2*sin(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc1*m1^2*sin(theta1) - l2*lc1^2*m1^2*m2*tau2*cos(theta1 + theta2) + lc1^2*lc2*m1^2*m2*tau2*cos(theta1 + theta2) - 4*J1*J2*dtheta1*dtheta2*l2*m1^2*sin(theta1 - theta2) - 4*J1*J2*dtheta1*dtheta2*lc2*m2^2*sin(theta1 - theta2) + 2*dtheta1*dtheta2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 + theta2) + 2*J1*J2*dtheta1^2*l2*m1*m2*sin(theta1 - theta2) + 2*J1*J2*dtheta2^2*l2*m1*m2*sin(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc2*m1*m2*sin(theta1 - theta2) + 2*J1*J2*dtheta2^2*lc2*m1*m2*sin(theta1 - theta2) + l2*lc1*lc2*m1*m2^2*tau2*cos(theta1) + 3*l2*lc1*lc2*m1^2*m2*tau2*cos(theta1) - dtheta1^2*l2*lc1^3*lc2*m1^2*m2^2*sin(theta1) + l2*lc1*lc2*m1*m2^2*tau2*cos(theta1 - 2*theta2) - l2*lc1*lc2*m1^2*m2*tau2*cos(theta1 - 2*theta2) - 2*dtheta1*dtheta2*lc1^2*lc2^3*m1^2*m2^2*sin(theta1 - theta2) + dtheta1^2*l2*lc1^3*lc2*m1^2*m2^2*sin(theta1 - 2*theta2) + 2*dtheta1^2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 + theta2) - dtheta1^2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 + theta2) + 2*dtheta2^2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 + theta2) - dtheta2^2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 + theta2) - 4*J1*dtheta1*dtheta2*l2^3*m1^2*m2*sin(theta1 - theta2) - 4*J1*dtheta1*dtheta2*lc2^3*m1*m2^2*sin(theta1 - theta2) + J2*dtheta1^2*l2*lc1^2*m1^2*m2*sin(theta1 + theta2) + J2*dtheta2^2*l2*lc1^2*m1^2*m2*sin(theta1 + theta2) - J2*dtheta1^2*lc1^2*lc2*m1^2*m2*sin(theta1 + theta2) - J2*dtheta2^2*lc1^2*lc2*m1^2*m2*sin(theta1 + theta2) + J1*dtheta1^2*l2^2*lc1*m1^2*m2*sin(theta1) + J1*dtheta1^2*lc1*lc2^2*m1*m2^2*sin(theta1) + 2*J1*dtheta1^2*lc1*lc2^2*m1^2*m2*sin(theta1) - 2*dtheta1^2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 - theta2) + dtheta1^2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 - theta2) - 2*dtheta2^2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 - theta2) + dtheta2^2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc1*m1*m2*sin(theta1) - 4*J1*dtheta1^2*l2*lc2^2*m1*m2^2*sin(theta1 - theta2) + 2*J1*dtheta1^2*l2*lc2^2*m1^2*m2*sin(theta1 - theta2) + J1*dtheta1^2*l2^2*lc1*m1^2*m2*sin(theta1 - 2*theta2) + 2*J1*dtheta1^2*l2^2*lc2*m1*m2^2*sin(theta1 - theta2) - 4*J1*dtheta1^2*l2^2*lc2*m1^2*m2*sin(theta1 - theta2) + J2*dtheta1^2*l2*lc1^2*m1^2*m2*sin(theta1 - theta2) - 4*J1*dtheta2^2*l2*lc2^2*m1*m2^2*sin(theta1 - theta2) + 2*J1*dtheta2^2*l2*lc2^2*m1^2*m2*sin(theta1 - theta2) + 2*J1*dtheta2^2*l2^2*lc2*m1*m2^2*sin(theta1 - theta2) - 4*J1*dtheta2^2*l2^2*lc2*m1^2*m2*sin(theta1 - theta2) + J2*dtheta2^2*l2*lc1^2*m1^2*m2*sin(theta1 - theta2) - J1*dtheta1^2*lc1*lc2^2*m1*m2^2*sin(theta1 - 2*theta2) + 2*J2*dtheta1^2*lc1^2*lc2*m1*m2^2*sin(theta1 - theta2) + J2*dtheta1^2*lc1^2*lc2*m1^2*m2*sin(theta1 - theta2) + 2*J2*dtheta2^2*lc1^2*lc2*m1*m2^2*sin(theta1 - theta2) + J2*dtheta2^2*lc1^2*lc2*m1^2*m2*sin(theta1 - theta2) + J1*dtheta1^2*l2*lc1*lc2*m1*m2^2*sin(theta1 - 2*theta2) - J1*dtheta1^2*l2*lc1*lc2*m1^2*m2*sin(theta1 - 2*theta2) - 4*J1*J2*dtheta1*dtheta2*l2*m1*m2*sin(theta1 - theta2) - 4*J1*J2*dtheta1*dtheta2*lc2*m1*m2*sin(theta1 - theta2) - 4*dtheta1*dtheta2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 + theta2) + 2*dtheta1*dtheta2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 + theta2) - 2*J2*dtheta1*dtheta2*l2*lc1^2*m1^2*m2*sin(theta1 + theta2) + 2*J2*dtheta1*dtheta2*lc1^2*lc2*m1^2*m2*sin(theta1 + theta2) - J1*dtheta1^2*l2*lc1*lc2*m1*m2^2*sin(theta1) - 3*J1*dtheta1^2*l2*lc1*lc2*m1^2*m2*sin(theta1) + 4*dtheta1*dtheta2*l2*lc1^2*lc2^2*m1^2*m2^2*sin(theta1 - theta2) - 2*dtheta1*dtheta2*l2^2*lc1^2*lc2*m1^2*m2^2*sin(theta1 - theta2) + 8*J1*dtheta1*dtheta2*l2*lc2^2*m1*m2^2*sin(theta1 - theta2) - 4*J1*dtheta1*dtheta2*l2*lc2^2*m1^2*m2*sin(theta1 - theta2) - 4*J1*dtheta1*dtheta2*l2^2*lc2*m1*m2^2*sin(theta1 - theta2) + 8*J1*dtheta1*dtheta2*l2^2*lc2*m1^2*m2*sin(theta1 - theta2) - 2*J2*dtheta1*dtheta2*l2*lc1^2*m1^2*m2*sin(theta1 - theta2) - 4*J2*dtheta1*dtheta2*lc1^2*lc2*m1*m2^2*sin(theta1 - theta2) - 2*J2*dtheta1*dtheta2*lc1^2*lc2*m1^2*m2*sin(theta1 - theta2))/(2*J1*J2*m1^2 + 2*J1*J2*m2^2 + l2^2*lc1^2*m1^2*m2^2 + lc1^2*lc2^2*m1^2*m2^2 + 2*J1*l2^2*m1*m2^2 + 2*J1*l2^2*m1^2*m2 + 2*J1*lc2^2*m1*m2^2 + 2*J1*lc2^2*m1^2*m2 + 2*J2*lc1^2*m1*m2^2 + 2*J2*lc1^2*m1^2*m2 + 4*J1*J2*m1*m2 - 2*l2*lc1^2*lc2*m1^2*m2^2 - 4*J1*l2*lc2*m1*m2^2 - 4*J1*l2*lc2*m1^2*m2 - l2^2*lc1^2*m1^2*m2^2*cos(2*theta2) - lc1^2*lc2^2*m1^2*m2^2*cos(2*theta2) + 2*l2*lc1^2*lc2*m1^2*m2^2*cos(2*theta2));
    dQ(8) = (2*J2*lc1*m1^2*tau2*sin(theta1) - 2*J1*J2*g*m2^2 - 2*J1*g*l2^2*m1*m2^2 - 2*J1*g*l2^2*m1^2*m2 - 2*J1*g*lc2^2*m1*m2^2 - 2*J1*g*lc2^2*m1^2*m2 - 2*J2*g*lc1^2*m1*m2^2 - 2*J2*g*lc1^2*m1^2*m2 - 4*J1*J2*g*m1*m2 - 2*J1*J2*g*m1^2 - 2*J1*l2*m1^2*tau2*sin(theta1 - theta2) - 2*J1*lc2*m2^2*tau2*sin(theta1 - theta2) - g*l2^2*lc1^2*m1^2*m2^2 - g*lc1^2*lc2^2*m1^2*m2^2 + l2*lc1^2*m1^2*m2*tau2*sin(theta1 + theta2) - lc1^2*lc2*m1^2*m2*tau2*sin(theta1 + theta2) + 2*g*l2*lc1^2*lc2*m1^2*m2^2 + 4*J1*g*l2*lc2*m1*m2^2 + 4*J1*g*l2*lc2*m1^2*m2 + dtheta1^2*lc1^3*lc2^2*m1^2*m2^2*cos(theta1) + l2^2*lc1*m1^2*m2*tau2*sin(theta1) + lc1*lc2^2*m1*m2^2*tau2*sin(theta1) + 2*lc1*lc2^2*m1^2*m2*tau2*sin(theta1) + g*l2^2*lc1^2*m1^2*m2^2*cos(2*theta2) + g*lc1^2*lc2^2*m1^2*m2^2*cos(2*theta2) + 2*J2*dtheta1^2*lc1^3*m1^2*m2*cos(theta1) + 2*J2*lc1*m1*m2*tau2*sin(theta1) + dtheta1^2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 - theta2) - dtheta1^2*lc1^3*lc2^2*m1^2*m2^2*cos(theta1 - 2*theta2) + dtheta2^2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 - theta2) - l2*lc1^2*m1^2*m2*tau2*sin(theta1 - theta2) - l2^2*lc1*m1^2*m2*tau2*sin(theta1 - 2*theta2) - 2*lc1^2*lc2*m1*m2^2*tau2*sin(theta1 - theta2) - lc1^2*lc2*m1^2*m2*tau2*sin(theta1 - theta2) + lc1*lc2^2*m1*m2^2*tau2*sin(theta1 - 2*theta2) + 2*J1*dtheta1^2*l2^3*m1^2*m2*cos(theta1 - theta2) + 2*J1*dtheta2^2*l2^3*m1^2*m2*cos(theta1 - theta2) + 2*J1*dtheta1^2*lc2^3*m1*m2^2*cos(theta1 - theta2) + 2*J1*dtheta2^2*lc2^3*m1*m2^2*cos(theta1 - theta2) - 2*J1*l2*m1*m2*tau2*sin(theta1 - theta2) - 2*J1*lc2*m1*m2*tau2*sin(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc1*m1^2*cos(theta1) + 2*J1*J2*dtheta1^2*l2*m1^2*cos(theta1 - theta2) + 2*J1*J2*dtheta2^2*l2*m1^2*cos(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc2*m2^2*cos(theta1 - theta2) + 2*J1*J2*dtheta2^2*lc2*m2^2*cos(theta1 - theta2) - dtheta1^2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 + theta2) - dtheta2^2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 + theta2) - 4*J1*J2*dtheta1*dtheta2*lc2*m2^2*cos(theta1 - theta2) + 2*dtheta1*dtheta2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 + theta2) + 2*J1*J2*dtheta1^2*l2*m1*m2*cos(theta1 - theta2) + 2*J1*J2*dtheta2^2*l2*m1*m2*cos(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc2*m1*m2*cos(theta1 - theta2) + 2*J1*J2*dtheta2^2*lc2*m1*m2*cos(theta1 - theta2) - dtheta1^2*l2*lc1^3*lc2*m1^2*m2^2*cos(theta1) - l2*lc1*lc2*m1*m2^2*tau2*sin(theta1) - 3*l2*lc1*lc2*m1^2*m2*tau2*sin(theta1) - 2*g*l2*lc1^2*lc2*m1^2*m2^2*cos(2*theta2) - 2*dtheta1*dtheta2*lc1^2*lc2^3*m1^2*m2^2*cos(theta1 - theta2) + dtheta1^2*l2*lc1^3*lc2*m1^2*m2^2*cos(theta1 - 2*theta2) + 2*dtheta1^2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 + theta2) - dtheta1^2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 + theta2) + 2*dtheta2^2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 + theta2) - dtheta2^2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 + theta2) - l2*lc1*lc2*m1*m2^2*tau2*sin(theta1 - 2*theta2) + l2*lc1*lc2*m1^2*m2*tau2*sin(theta1 - 2*theta2) - 4*J1*dtheta1*dtheta2*l2^3*m1^2*m2*cos(theta1 - theta2) - 4*J1*dtheta1*dtheta2*lc2^3*m1*m2^2*cos(theta1 - theta2) + J2*dtheta1^2*l2*lc1^2*m1^2*m2*cos(theta1 + theta2) + J2*dtheta2^2*l2*lc1^2*m1^2*m2*cos(theta1 + theta2) - J2*dtheta1^2*lc1^2*lc2*m1^2*m2*cos(theta1 + theta2) - J2*dtheta2^2*lc1^2*lc2*m1^2*m2*cos(theta1 + theta2) + J1*dtheta1^2*l2^2*lc1*m1^2*m2*cos(theta1) + J1*dtheta1^2*lc1*lc2^2*m1*m2^2*cos(theta1) + 2*J1*dtheta1^2*lc1*lc2^2*m1^2*m2*cos(theta1) - 2*dtheta1^2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 - theta2) + dtheta1^2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 - theta2) - 2*dtheta2^2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 - theta2) + dtheta2^2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 - theta2) + 2*J1*J2*dtheta1^2*lc1*m1*m2*cos(theta1) - 4*J1*dtheta1^2*l2*lc2^2*m1*m2^2*cos(theta1 - theta2) + 2*J1*dtheta1^2*l2*lc2^2*m1^2*m2*cos(theta1 - theta2) + J1*dtheta1^2*l2^2*lc1*m1^2*m2*cos(theta1 - 2*theta2) + 2*J1*dtheta1^2*l2^2*lc2*m1*m2^2*cos(theta1 - theta2) - 4*J1*dtheta1^2*l2^2*lc2*m1^2*m2*cos(theta1 - theta2) + J2*dtheta1^2*l2*lc1^2*m1^2*m2*cos(theta1 - theta2) - 4*J1*dtheta2^2*l2*lc2^2*m1*m2^2*cos(theta1 - theta2) + 2*J1*dtheta2^2*l2*lc2^2*m1^2*m2*cos(theta1 - theta2) + 2*J1*dtheta2^2*l2^2*lc2*m1*m2^2*cos(theta1 - theta2) - 4*J1*dtheta2^2*l2^2*lc2*m1^2*m2*cos(theta1 - theta2) + J2*dtheta2^2*l2*lc1^2*m1^2*m2*cos(theta1 - theta2) - J1*dtheta1^2*lc1*lc2^2*m1*m2^2*cos(theta1 - 2*theta2) + 2*J2*dtheta1^2*lc1^2*lc2*m1*m2^2*cos(theta1 - theta2) + J2*dtheta1^2*lc1^2*lc2*m1^2*m2*cos(theta1 - theta2) + 2*J2*dtheta2^2*lc1^2*lc2*m1*m2^2*cos(theta1 - theta2) + J2*dtheta2^2*lc1^2*lc2*m1^2*m2*cos(theta1 - theta2) - 4*J1*J2*dtheta1*dtheta2*l2*m1^2*cos(theta1 - theta2) - 4*J1*J2*dtheta1*dtheta2*l2*m1*m2*cos(theta1 - theta2) - 4*J1*J2*dtheta1*dtheta2*lc2*m1*m2*cos(theta1 - theta2) - 4*dtheta1*dtheta2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 + theta2) + 2*dtheta1*dtheta2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 + theta2) - 2*J2*dtheta1*dtheta2*l2*lc1^2*m1^2*m2*cos(theta1 + theta2) + 2*J2*dtheta1*dtheta2*lc1^2*lc2*m1^2*m2*cos(theta1 + theta2) - J1*dtheta1^2*l2*lc1*lc2*m1*m2^2*cos(theta1) - 3*J1*dtheta1^2*l2*lc1*lc2*m1^2*m2*cos(theta1) + 4*dtheta1*dtheta2*l2*lc1^2*lc2^2*m1^2*m2^2*cos(theta1 - theta2) - 2*dtheta1*dtheta2*l2^2*lc1^2*lc2*m1^2*m2^2*cos(theta1 - theta2) + 8*J1*dtheta1*dtheta2*l2*lc2^2*m1*m2^2*cos(theta1 - theta2) - 4*J1*dtheta1*dtheta2*l2*lc2^2*m1^2*m2*cos(theta1 - theta2) - 4*J1*dtheta1*dtheta2*l2^2*lc2*m1*m2^2*cos(theta1 - theta2) + 8*J1*dtheta1*dtheta2*l2^2*lc2*m1^2*m2*cos(theta1 - theta2) - 2*J2*dtheta1*dtheta2*l2*lc1^2*m1^2*m2*cos(theta1 - theta2) - 4*J2*dtheta1*dtheta2*lc1^2*lc2*m1*m2^2*cos(theta1 - theta2) - 2*J2*dtheta1*dtheta2*lc1^2*lc2*m1^2*m2*cos(theta1 - theta2) + J1*dtheta1^2*l2*lc1*lc2*m1*m2^2*cos(theta1 - 2*theta2) - J1*dtheta1^2*l2*lc1*lc2*m1^2*m2*cos(theta1 - 2*theta2))/(2*J1*J2*m1^2 + 2*J1*J2*m2^2 + l2^2*lc1^2*m1^2*m2^2 + lc1^2*lc2^2*m1^2*m2^2 + 2*J1*l2^2*m1*m2^2 + 2*J1*l2^2*m1^2*m2 + 2*J1*lc2^2*m1*m2^2 + 2*J1*lc2^2*m1^2*m2 + 2*J2*lc1^2*m1*m2^2 + 2*J2*lc1^2*m1^2*m2 + 4*J1*J2*m1*m2 - 2*l2*lc1^2*lc2*m1^2*m2^2 - 4*J1*l2*lc2*m1*m2^2 - 4*J1*l2*lc2*m1^2*m2 - l2^2*lc1^2*m1^2*m2^2*cos(2*theta2) - lc1^2*lc2^2*m1^2*m2^2*cos(2*theta2) + 2*l2*lc1^2*lc2*m1^2*m2^2*cos(2*theta2));
end