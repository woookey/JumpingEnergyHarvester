function dQ = maccepaHoppermaccepaModelDynamicsAtStance(Q, param, torque)
    % Assign global variables to local
    m1 = param.m1; m2 = param.m2; l1 = param.l1; l2 = param.l2;
    J1 = param.J1; J2 = param.J2; lc1 = param.lc1; lc2 = param.lc2;
    g = param.g; theta1 = Q(1); theta2 = Q(2); dtheta1 = Q(3); dtheta2 = Q(4);
    tau1 = torque(1); tau2 = torque(2);
    
    dQ = zeros(4, 1);
    dQ(1) = Q(3);
    dQ(2) = Q(4);
    dQ(3) = ((m1*l2^2 + m2*lc2^2 + J2)*(g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2)) + ((conj(l2)*cos(conj(theta1) - conj(theta2)) + cos(conj(theta1))*conj(l1))*((((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(l2*lc1*m1*sin(theta2)*dtheta1^2 - tau2 + g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) + dtheta1*(dtheta1*l1*sin(theta1) + l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)) - (((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(- l2*lc1*m1*sin(theta2)*dtheta2^2 + 2*dtheta1*l2*lc1*m1*sin(theta2)*dtheta2 + g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) - dtheta2*l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)))/(((abs(l2)^2*cos(conj(theta1) - conj(theta2)))/l2 + (cos(conj(theta1))*abs(l1)^2)/l1)*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)) - (abs(l2)^2*cos(conj(theta1) - conj(theta2))*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)))/l2) - dtheta2^2*l2*lc1*m1*sin(theta2) + 2*dtheta1*dtheta2*l2*lc1*m1*sin(theta2)))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - ((g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2)) - tau2 + (conj(l2)*cos(conj(theta1) - conj(theta2))*((((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(l2*lc1*m1*sin(theta2)*dtheta1^2 - tau2 + g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) + dtheta1*(dtheta1*l1*sin(theta1) + l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)) - (((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(- l2*lc1*m1*sin(theta2)*dtheta2^2 + 2*dtheta1*l2*lc1*m1*sin(theta2)*dtheta2 + g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) - dtheta2*l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)))/(((abs(l2)^2*cos(conj(theta1) - conj(theta2)))/l2 + (cos(conj(theta1))*abs(l1)^2)/l1)*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)) - (abs(l2)^2*cos(conj(theta1) - conj(theta2))*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)))/l2) + dtheta1^2*l2*lc1*m1*sin(theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2);
    dQ(4) = ((m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2)*(g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2)) + ((conj(l2)*cos(conj(theta1) - conj(theta2)) + cos(conj(theta1))*conj(l1))*((((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(l2*lc1*m1*sin(theta2)*dtheta1^2 - tau2 + g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) + dtheta1*(dtheta1*l1*sin(theta1) + l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)) - (((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(- l2*lc1*m1*sin(theta2)*dtheta2^2 + 2*dtheta1*l2*lc1*m1*sin(theta2)*dtheta2 + g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) - dtheta2*l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)))/(((abs(l2)^2*cos(conj(theta1) - conj(theta2)))/l2 + (cos(conj(theta1))*abs(l1)^2)/l1)*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)) - (abs(l2)^2*cos(conj(theta1) - conj(theta2))*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)))/l2) - dtheta2^2*l2*lc1*m1*sin(theta2) + 2*dtheta1*dtheta2*l2*lc1*m1*sin(theta2)))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - ((g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2)) - tau2 + (conj(l2)*cos(conj(theta1) - conj(theta2))*((((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(l2*lc1*m1*sin(theta2)*dtheta1^2 - tau2 + g*(l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) + dtheta1*(dtheta1*l1*sin(theta1) + l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)) - (((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2))*(- l2*lc1*m1*sin(theta2)*dtheta2^2 + 2*dtheta1*l2*lc1*m1*sin(theta2)*dtheta2 + g*(lc1*m1*sin(theta1) + l2*m1*sin(theta1 - theta2) + lc2*m2*sin(theta1 - theta2))) - dtheta2*l2*sin(theta1 - theta2)*(dtheta1 - dtheta2)))/(((abs(l2)^2*cos(conj(theta1) - conj(theta2)))/l2 + (cos(conj(theta1))*abs(l1)^2)/l1)*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)) - (abs(l2)^2*cos(conj(theta1) - conj(theta2))*(((l1*cos(theta1) + l2*cos(theta1 - theta2))*(m1*l2^2 + lc1*m1*cos(theta2)*l2 + m2*lc2^2 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2) - (l2*cos(theta1 - theta2)*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2)))/l2) + dtheta1^2*l2*lc1*m1*sin(theta2))*(m1*l2^2 + 2*m1*cos(theta2)*l2*lc1 + m1*lc1^2 + m2*lc2^2 + J1 + J2))/(J1*J2 + l2^2*lc1^2*m1^2 + J1*l2^2*m1 + J2*lc1^2*m1 + J1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l2^2*lc1^2*m1^2*cos(theta2)^2);
end